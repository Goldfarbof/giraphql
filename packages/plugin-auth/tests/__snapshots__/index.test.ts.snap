// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`auth example schema generates expected schema 1`] = `
"type Circle implements Shape {
  area: Int!
  name: String
}

union CornerUnion = Rectangle | Square

type Line implements PostResolvePass & PreResolvePass & SkipImplementorPreResolve {
  length: Float
  name: String!
}

type LinePostResolveFail implements PostResolveFail {
  length: Float
  name: String!
}

type LinePreResolveFail implements PreResolveFail {
  length: Float
  name: String!
}

type Mutation {
  createUser(firstName: String!, lastName: String!): User!
}

type Oval implements OvalThing {
  area: Int!
  ovalField: Boolean!
}

interface OvalThing {
  ovalField: Boolean!
}

union Polygon = Rectangle | Square | Triangle

interface PostResolveFail {
  name: String!
}

union PostResolveFailUnion = Line

interface PostResolvePass {
  name: String!
}

union PostResolvePassUnion = Line

interface PreResolveFail {
  name: String!
}

union PreResolveFailUnion = Line

interface PreResolvePass {
  name: String!
}

union PreResolvePassUnion = Line

type Query {
  cornerUnion(height: Int!, width: Int!): CornerUnion
  interfacePostResolveFail: PostResolveFail
  interfacePostResolvePass: PostResolvePass
  interfacePreResolveFail: PreResolveFail
  interfacePreResolvePass: PreResolvePass
  line: Line!
  oval: Oval
  ovalThing(oval: Boolean): RoundThings
  polygons: [Polygon]!
  postResolveFailUnion: PostResolveFailUnion
  postResolvePassUnion: PostResolvePassUnion
  preResolveFailUnion: PreResolveFailUnion
  preResolvePassUnion: PreResolvePassUnion
  rectangle(height: Int!, width: Int!): Rectangle
  roundThing(oval: Boolean): RoundThings
  shapes: [Shape]!
  skipImplementorPreResolveChecks: SkipImplementorPreResolve
  skipMemberPreResolveUnion: SkipImplementorPreResolveUnion
  square: Square
  squareWithoutCheck: Square
  thingWithCorners(height: Int!, width: Int!): ThingWithCorners
  user(id: ID!): User!
  users: [User]!
}

type Rectangle implements Shape & ThingWithCorners {
  area: Int
  hasCorners: Boolean!
  name: String
}

union RoundThings = Circle | Oval

interface Shape {
  name: String
}

interface SkipImplementorPreResolve {
  name: String!
}

union SkipImplementorPreResolveUnion = Line | Oval

type Square implements Shape {
  name: String
  size: Float!
}

interface ThingWithCorners {
  hasCorners: Boolean!
}

type Triangle implements Shape {
  edges: Int
  name: String
}

type User {
  email: String!
  firstName: String!
  id: ID!
  lastName: String!
}
"
`;
