import './types/global/index.ts';
import BuildCache from './build-cache.ts';
import SchemaBuilderClass from './builder.ts';
import InternalFieldBuilder from './fieldUtils/builder.ts';
import InternalInputFieldBuilder from './fieldUtils/input.ts';
import InternalInterfaceFieldBuilder from './fieldUtils/interface.ts';
import InternalMutationFieldBuilder from './fieldUtils/mutation.ts';
import InternalObjectFieldBuilder from './fieldUtils/object.ts';
import InternalQueryFieldBuilder from './fieldUtils/query.ts';
import InternalRootFieldBuilder from './fieldUtils/root.ts';
import InternalSubscriptionFieldBuilder from './fieldUtils/subscription.ts';
import BaseTypeRef from './refs/base.ts';
import BuiltinScalarRef from './refs/builtin-scalar.ts';
import EnumRef from './refs/enum.ts';
import FieldRef from './refs/field.ts';
import InputTypeRef from './refs/input.ts';
import InputFieldRef from './refs/input-field.ts';
import InputObjectRef, { ImplementableInputObjectRef } from './refs/input-object.ts';
import InterfaceRef, { ImplementableInterfaceRef } from './refs/interface.ts';
import ObjectRef, { ImplementableObjectRef } from './refs/object.ts';
import OutputTypeRef from './refs/output.ts';
import ScalarRef from './refs/scalar.ts';
import UnionRef from './refs/union.ts';
import { FieldKind, NormalizeSchemeBuilderOptions, SchemaTypes } from './types/index.ts';
export * from './plugins/index.ts';
export * from './types/index.ts';
export * from './utils/index.ts';
export { BaseTypeRef, BuildCache, BuiltinScalarRef, EnumRef, FieldRef, ImplementableInputObjectRef, ImplementableInterfaceRef, ImplementableObjectRef, InputFieldRef, InputObjectRef, InputTypeRef, InterfaceRef, ObjectRef, OutputTypeRef, ScalarRef, UnionRef, };
const SchemaBuilder = SchemaBuilderClass as {
    registerPlugin: typeof SchemaBuilderClass.registerPlugin;
    allowPluginReRegistration: boolean;
    new <Types extends Partial<GiraphQLSchemaTypes.UserSchemaTypes> = {}>(options: NormalizeSchemeBuilderOptions<GiraphQLSchemaTypes.ExtendDefaultTypes<Types>>): GiraphQLSchemaTypes.SchemaBuilder<GiraphQLSchemaTypes.ExtendDefaultTypes<Types>>;
};
export default SchemaBuilder;
export const FieldBuilder = InternalFieldBuilder as new <Types extends SchemaTypes, ParentShape, Kind extends "Interface" | "Object" = "Interface" | "Object">(name: string) => GiraphQLSchemaTypes.FieldBuilder<Types, ParentShape, Kind>;
export const RootFieldBuilder = InternalRootFieldBuilder as new <Types extends SchemaTypes, ParentShape, Kind extends FieldKind = FieldKind>(name: string, builder: GiraphQLSchemaTypes.SchemaBuilder<Types>, kind: FieldKind, graphqlKind: GiraphQLSchemaTypes.GiraphQLKindToGraphQLType[FieldKind]) => GiraphQLSchemaTypes.RootFieldBuilder<Types, ParentShape, Kind>;
export const QueryFieldBuilder = InternalQueryFieldBuilder as new <Types extends SchemaTypes, ParentShape>(builder: GiraphQLSchemaTypes.SchemaBuilder<Types>) => GiraphQLSchemaTypes.QueryFieldBuilder<Types, ParentShape>;
export const MutationFieldBuilder = InternalMutationFieldBuilder as new <Types extends SchemaTypes, ParentShape>(builder: GiraphQLSchemaTypes.SchemaBuilder<Types>) => GiraphQLSchemaTypes.MutationFieldBuilder<Types, ParentShape>;
export const SubscriptionFieldBuilder = InternalSubscriptionFieldBuilder as new <Types extends SchemaTypes, ParentShape>(builder: GiraphQLSchemaTypes.SchemaBuilder<Types>) => GiraphQLSchemaTypes.SubscriptionFieldBuilder<Types, ParentShape>;
export const ObjectFieldBuilder = InternalObjectFieldBuilder as new <Types extends SchemaTypes, ParentShape>(name: string, builder: GiraphQLSchemaTypes.SchemaBuilder<Types>) => GiraphQLSchemaTypes.ObjectFieldBuilder<Types, ParentShape>;
export const InterfaceFieldBuilder = InternalInterfaceFieldBuilder as new <Types extends SchemaTypes, ParentShape>(name: string, builder: GiraphQLSchemaTypes.SchemaBuilder<Types>) => GiraphQLSchemaTypes.InterfaceFieldBuilder<Types, ParentShape>;
export const InputFieldBuilder = InternalInputFieldBuilder as new <Types extends SchemaTypes, Kind extends "Arg" | "InputObject" = "Arg" | "InputObject">(builder: GiraphQLSchemaTypes.SchemaBuilder<Types>, kind: Kind, typename: string) => GiraphQLSchemaTypes.InputFieldBuilder<Types, Kind>;
