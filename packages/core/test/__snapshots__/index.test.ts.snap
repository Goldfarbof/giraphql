// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Example schema generates expected schema 1`] = `
"type Article {
  \\"\\"\\"Title of the article, probably click bait\\"\\"\\"
  title: String!
}

interface Countable {
  count(max: Int!): Int!
}

input Example {
  id: ID!
  id2: Int
  ids: [ID!]!
  ids2: [Int!]
}

input Example2 {
  example: Example!
  id: ID
  ids: [ID!]!
  more: Example2!
}

type Query {
  user: User!
  stuff: [stuff!]!
  sheep: Sheep!
}

union SearchResult = User | Article

interface Shaveable {
  id: ID!
  shaved: Boolean!
  extendMePlease: String!
}

type Sheep implements Shaveable & Countable {
  id: ID!
  shaved: Boolean!
  extendMePlease: String!
  count(max: Int!): Int!
  color(id: ID): String!
  thing: stuff!
}

enum stuff {
  Beats
  Bears
  BattlestarGalactica
}

type Subscription {
  event: String!
}

type User {
  id: ID!
  displayName: String!
  firstName: String!
  lastName: String!
  firstBornChild: User!
  partialName(example: Example!, firstN: Int!): String!
  recursiveArgs(example2: Example2!, firstN: ID): ID!
  related: SearchResult!
  friends: [User!]!
  stuff: [String!]!
  optional: String
  list(ids: [ID!]!): [ID!]!
  sparseList(ids: [ID]!): [ID]!
  notSparseList(ids: [ID!]!): [ID]
  defaultArgs(ids: [ID!]! = [\\"abc\\"]): [ID!]!
}
"
`;
