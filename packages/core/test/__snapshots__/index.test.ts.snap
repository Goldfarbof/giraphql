// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Example schema generates expected schema 1`] = `
"interface Animal {
  species: String
}

\\"\\"\\"shape can be last arg\\"\\"\\"
type Article {
  \\"\\"\\"Title of the article, probably click bait\\"\\"\\"
  title: String!
}

interface Countable {
  count(max: Int!): Int!
}

scalar Date

input Example {
  date: Date
  enum: MyEnum
  id: ID!
  id2: Int
  ids: [ID!]!
  ids2: [Int!]
}

input Example2 {
  example: Example!
  id: ID
  ids: [ID!]!
  more: Example2!
}

type Giraffe implements Animal {
  age: Int!
  name: String!
  species: String
}

enum MyEnum {
  Bar
  Foo
  Num
}

type Query {
  sheep: Sheep!
  stuff: [stuff!]!
  user: User!
}

union SearchResult = Article | User

interface Shaveable {
  extendMePlease: String!
  id: ID!
  shaved: Boolean!
}

type Sheep implements Countable & Shaveable {
  color(id: ID): String!
  count(max: Int!): Int!
  extendMePlease: String!
  id: ID!
  shaved: Boolean!
  thing: stuff!
}

enum stuff {
  BattlestarGalactica
  Bears
  Beats
}

type Subscription {
  event: String!
}

type User {
  defaultArgs(ids: [ID!]! = [\\"abc\\"]): [ID!]!
  displayName: String!
  fact: String
  firstBornChild: User!
  firstName: String!
  friends: [User!]!
  id: ID!
  lastName: String!
  list(ids: [ID!]!): [ID!]!
  newField: String!
  notSparseList(ids: [ID!]!): [ID!]
  optional: String
  partialName(example: Example!, firstN: Int!): String!
  recursiveArgs(example2: Example2!, firstN: ID): ID!
  related: SearchResult!
  sparseList(ids: [ID]!): [ID]!
  stuff: [String!]!
}
"
`;

exports[`Giraffe schema generates expected schema 1`] = `
"interface Animal {
  diet: Diet!
}

interface AnimalFromClass {
  diet: Diet!
}

interface AnimalFromRef {
  diet: Diet!
}

\\"\\"\\"
A date string, such as 2007-12-03, compliant with the \`full-date\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
\\"\\"\\"
scalar Date

enum Diet {
  CARNIVOROUS
  HERBIVOROUS
  OMNIVORIOUS
}

\\"\\"\\"Long necks, cool patterns, taller than you.\\"\\"\\"
type Giraffe implements Animal {
  age: Int!

  \\"\\"\\"
  While Giraffes are herbivores, they do eat the bones of dead animals to get extra calcium
  \\"\\"\\"
  diet: Diet!
  height(unit: LengthUnit! = Meters): Float!
  name: String!
  species: GiraffeSpecies!
}

\\"\\"\\"Long necks, cool patterns, taller than you.\\"\\"\\"
type GiraffeFromClass implements AnimalFromClass {
  age: Int!
  diet: Diet!
  name: String!
}

\\"\\"\\"Long necks, cool patterns, taller than you.\\"\\"\\"
type GiraffeFromRef implements AnimalFromRef {
  age: Int!
  diet: Diet!
  name: String!
}

enum GiraffeSpecies {
  Masai
  Northern
  Reticulated

  \\"\\"\\"Also known as two-horned giraffe\\"\\"\\"
  Southern
}

enum LengthUnit {
  Feet
  Meters
}

scalar PositiveInt

type Query {
  animal: Animal!
  animalClass: AnimalFromClass!
  animalRef: AnimalFromRef!
  date: Date!
  giraffe: Giraffe!
  giraffeClass: GiraffeFromClass!
  giraffeRef: GiraffeFromRef!
  positive: PositiveInt!
}
"
`;
