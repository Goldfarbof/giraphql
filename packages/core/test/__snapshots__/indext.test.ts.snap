// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Example schema generates expected schema 1`] = `
"type Article {
  \\"\\"\\"Title of the article, probably click bait\\"\\"\\"
  title: String!
}

interface Countable {
  \\"\\"\\"count\\"\\"\\"
  count(max: Int!): Int!
}

input Example {
  id: ID!
  id2: Int
  ids: [ID]!
  ids2: [Int]
}

input Example2 {
  example: Example!
  id: ID
  ids: [ID]!
  more: Example2!
}

type Query {
  \\"\\"\\"user\\"\\"\\"
  user: User!

  \\"\\"\\"stuff\\"\\"\\"
  stuff: [stuff]!

  \\"\\"\\"sheep\\"\\"\\"
  sheep: Sheep!
}

union SearchResult = User | Article

interface Shaveable {
  \\"\\"\\"id\\"\\"\\"
  id: ID!

  \\"\\"\\"shaved\\"\\"\\"
  shaved: Boolean!
}

type Sheep implements Shaveable & Countable {
  \\"\\"\\"id\\"\\"\\"
  id: ID!

  \\"\\"\\"shaved\\"\\"\\"
  shaved: Boolean!

  \\"\\"\\"count\\"\\"\\"
  count(max: Int!): Int!

  \\"\\"\\"color\\"\\"\\"
  color(id: ID): String!

  \\"\\"\\"thing\\"\\"\\"
  thing: stuff!
}

enum stuff {
  Beats
  Bears
  BattlestarGalactica
}

type User {
  \\"\\"\\"id\\"\\"\\"
  id: ID!

  \\"\\"\\"displayName\\"\\"\\"
  displayName: String!

  \\"\\"\\"firstName\\"\\"\\"
  firstName: String!

  \\"\\"\\"lastName\\"\\"\\"
  lastName: String!

  \\"\\"\\"firstBornChild\\"\\"\\"
  firstBornChild: User!

  \\"\\"\\"partialName\\"\\"\\"
  partialName(example: Example!, firstN: Int!): String!

  \\"\\"\\"recursiveArgs\\"\\"\\"
  recursiveArgs(example2: Example2!, firstN: ID): ID!

  \\"\\"\\"privateField\\"\\"\\"
  privateField: String!

  \\"\\"\\"related\\"\\"\\"
  related: SearchResult!

  \\"\\"\\"friends\\"\\"\\"
  friends: [User]!

  \\"\\"\\"stuff\\"\\"\\"
  stuff: [String]!

  \\"\\"\\"optional\\"\\"\\"
  optional: String

  \\"\\"\\"list\\"\\"\\"
  list(ids: [ID]!): [ID]!
}
"
`;
