// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Example schema generates expected schema 1`] = `
"interface Animal {
  species: String
}

\\"\\"\\"shape can be last arg\\"\\"\\"
type Article {
  \\"\\"\\"Title of the article, probably click bait\\"\\"\\"
  title: String!
}

interface Countable {
  count(max: Int!): Int!
}

scalar Date

input Example {
  date: Date
  enum: MyEnum
  id: ID!
  id2: Int
  ids: [ID!]!
  ids2: [Int!]
}

input Example2 {
  example: Example!
  id: ID
  ids: [ID!]!
  more: Example2!
}

type Giraffe implements Animal {
  age: Int!
  name: String!
  species: String
}

enum MyEnum {
  Bar
  Foo
  Num
}

type Query {
  sheep: Sheep!
  stuff: [stuff!]!
  user: User!
}

union SearchResult = Article | User

interface Shaveable {
  extendMePlease: String!
  id: ID!
  shaved: Boolean!
}

type Sheep implements Countable & Shaveable {
  color(id: ID): String!
  count(max: Int!): Int!
  extendMePlease: String!
  id: ID!
  shaved: Boolean!
  thing: stuff!
}

enum stuff {
  BattlestarGalactica
  Bears
  Beats
}

type Subscription {
  event: String!
}

type User {
  defaultArgs(ids: [ID!]! = [\\"abc\\"]): [ID!]!
  displayName: String!
  fact: String
  firstBornChild: User!
  firstName: String!
  friends: [User!]!
  id: ID!
  lastName: String!
  list(ids: [ID!]!): [ID!]!
  newField: String!
  notSparseList(ids: [ID!]!): [ID!]
  optional: String
  partialName(example: Example!, firstN: Int!): String!
  recursiveArgs(example2: Example2!, firstN: ID): ID!
  related: SearchResult!
  sparseList(ids: [ID]!): [ID]!
  stuff: [String!]!
}
"
`;
